pipeline {
    agent any
    environment {
        pomfile = "C:/ProgramData/Jenkins/.jenkins/workspace/multi-branch-demo-2_dev/my-app/"
        registry = "kevalk/my-app-1.0-snapshot ."
        registryCredential = 'dockerhub_id'
        dockerImage = ''
    }
    tools {
        maven "MAVEN"
        jdk "JDK"
    }
    stages {
        stage('Initialize'){
            steps{
                bat "mvn -v"
                bat "java -version"
            }
        }
        stage('Build') {
            steps {
                dir(pomfile) {
                bat 'mvn -B clean package'
                }
            }
        }
        stage('SonarQube analysis') {
            steps {
                withSonarQubeEnv('SonarQube 1.0') {
                    dir(pomfile) {
                        bat 'mvn clean package sonar:sonar' 
                    }
                }
            }
        }
        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('Building our image') {
            steps{
                script {
                    dockerImage = docker.build registry 
                }
            }
        }
        stage('Push our image') {
            steps{
                script {
                    docker.withRegistry( '', registryCredential ) { dockerImage.push() }
                }
            }
        }
        stage('Deploy and Run our Image') {
            steps{
                bat 'docker pull %registry%'
                bat 'docker run -p 8000:8000 %registry%'
            }
        }
    }
    post {
        always {
            emailext body: 'A Test Email', recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']], subject: 'Test'
            junit(
                allowEmptyResults: true,
                testResults: '*/test-reports/.xml'
          )
      }
   }
}
